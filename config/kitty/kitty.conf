font_family      Ark Pixel 16px monospaced latin
bold_font        ArkPixel1XMonospacedLatin 2p Nerd Font
italic_font      auto
bold_italic_font auto

font_size 22.0

adjust_line_height  0
adjust_column_width 0

 adjust_baseline 0


symbol_map U+E000-U+E00D Symbols Nerd Font

symbol_map U+e0a0-U+e0a2,U+e0b0-U+e0b3 Symbols Nerd Font

symbol_map U+e0a3-U+e0a3,U+e0b4-U+e0c8,U+e0cc-U+e0d2,U+e0d4-U+e0d4 Symbols Nerd Font

symbol_map U+e5fa-U+e62b Symbols Nerd Font

symbol_map U+e700-U+e7c5 Symbols Nerd Font

symbol_map U+f000-U+f2e0 Symbols Nerd Font

symbol_map U+e200-U+e2a9 Symbols Nerd Font

symbol_map U+f400-U+f4a8,U+2665-U+2665,U+26A1-U+26A1,U+f27c-U+f27c Symbols Nerd Font

symbol_map U+F300-U+F313 Symbols Nerd Font

symbol_map U+23fb-U+23fe,U+2b58-U+2b58 Symbols Nerd Font

symbol_map U+f500-U+fd46 Symbols Nerd Font

symbol_map U+e300-U+e3eb Symbols Nerd Font

symbol_map U+21B5,U+25B8,U+2605,U+2630,U+2632,U+2714,U+E0A3,U+E615,U+E62B Symbols Nerd Font

disable_ligatures never

box_drawing_scale 0.001, 1, 1.5, 2

 cursor #cccccc

 cursor_text_color #111111

cursor_shape beam

 cursor_beam_thickness 1.5


 cursor_underline_thickness 2.0

 cursor_blink_interval -1

 cursor_stop_blinking_after 15.0


 scrollback_lines 2000

 scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
 scrollback_pager nvim -c 'setlocal nonumber nolist showtabline=0 foldcolumn=0|Man!' -c "autocmd VimEnter * normal G" -
 scrollback_pager nvim


 scrollback_pager_history_size 0

 scrollback_fill_enlarged_window no

 wheel_scroll_multiplier 5.0

 wheel_scroll_min_lines 1


 touch_scroll_multiplier 1.0

 mouse_hide_wait 3.0

url_color #0087bd
url_style curly

open_url_with default

 url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

detect_urls yes


 copy_on_select no

 paste_actions quote-urls-at-prompt

 strip_trailing_spaces never


 select_by_word_characters @-./_~?&=%+

 select_by_word_characters_forward

 click_interval -1.0

 focus_follows_mouse no


 pointer_shape_when_grabbed arrow

 default_pointer_shape beam


 pointer_shape_when_dragging beam
 clear_all_mouse_actions no

 mouse_map left click ungrabbed mouse_handle_click selection link prompt

 mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt

 mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link

 mouse_map ctrl+shift+left press grabbed discard_event

 mouse_map middle release ungrabbed paste_from_selection

 mouse_map left press ungrabbed mouse_selection normal


 mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle


 mouse_map left doublepress ungrabbed mouse_selection word


 mouse_map left triplepress ungrabbed mouse_selection line


 mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point



 mouse_map right press ungrabbed mouse_selection extend


 mouse_map shift+middle release ungrabbed,grabbed paste_selection
 mouse_map shift+middle press grabbed discard_event

 mouse_map shift+left press ungrabbed,grabbed mouse_selection normal


 mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle


 mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word


 mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line


 mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point


 mouse_map shift+right press ungrabbed,grabbed mouse_selection extend


 mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output


 repaint_delay 10


 input_delay 3

 sync_to_monitor yes


 enable_audio_bell yes


 visual_bell_duration 0.0


 visual_bell_color none

 window_alert_on_bell yes


 command_on_bell none

 bell_path none


 remember_window_size  yes
 initial_window_width  640
 initial_window_height 400


enabled_layouts horizontal
map kitty_mod+x toggle_layout stack


 window_resize_step_cells 2
 window_resize_step_lines 2

 window_border_width 0.5pt

 draw_minimal_borders yes


 window_margin_width 0

 single_window_margin_width -1


 window_padding_width 0

 placement_strategy center


 active_border_color #00ff00

 inactive_border_color #cccccc


 bell_border_color #ff5a00


 inactive_text_alpha 1.0


 window_logo_path none

 window_logo_position bottom-right

 window_logo_alpha 0.5

 resize_debounce_time 0.1


 resize_draw_strategy static

 resize_in_steps no


 visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

#: The list of characters for visual window selection. For example,
#: for selecting a window to focus on with focus_visible_window. The
#: value should be a series of unique numbers or alphabets, case
#: insensitive, from the set [0-9A-Z]. Specify your preference as a
#: string of characters.

 confirm_os_window_close -1

#: A template to render the tab title. The default just renders the
#: title with optional symbols for bell and activity. If you wish to
#: include the tab-index as well, use something like#: {index}#:{title}.
#: Useful if you have shortcuts mapped for goto_tab N. If you prefer
#: to see the index as a superscript, use {sup.index}. In addition you
#: can use {layout_name} for the current layout name, {num_windows}
#: for the number of windows in the tab and {num_window_groups} for
#: the number of window groups (not counting overlay windows) in the
#: tab. Note that formatting is done by Python's string formatting
#: machinery, so you can use, for instance, {layout_name[#:2].upper()}
#: to show only the first two letters of the layout name, upper-cased.
#: If you want to style the text, you can use styling directives, for
#: example#:
#: `{fmt.fg.red}red{fmt.fg.tab}normal{fmt.bg._00FF00}greenbg{fmt.bg.tab}`.
#: Similarly, for bold and italic#:
#: `{fmt.bold}bold{fmt.nobold}normal{fmt.italic}italic{fmt.noitalic}`.
#: Note that for backward compatibility, if {bell_symbol} or
#: {activity_symbol} are not present in the template, they are
#: prepended to it.
tab_bar_edge bottom
tab_bar_align left
tab_bar_style custom
tab_bar_min_tabs 1
tab_activity_symbol none
bell_on_tab no
tab_separator ""
tab_bar_margin_width 0.0
tab_bar_margin_height 0.0 0.0
tab_title_template "{f'{title[#:30]}â€¦' if title.rindex(title[-1]) + 1 > 30 else (title.center(6) if (title.rindex(title[-1]) + 1) % 2 == 0 else title.center(5))}"
active_tab_font_style   bold
 active_tab_title_template none

#: Template to use for active tabs. If not specified falls back to
#: tab_title_template.

 active_tab_foreground   #000
 active_tab_background   #eee
 active_tab_font_style   bold-italic
 inactive_tab_foreground #444
 inactive_tab_background #999
 inactive_tab_font_style normal

#: Tab bar colors and styles.

 tab_bar_background none

#: Background color for the tab bar. Defaults to using the terminal
#: background color.

 tab_bar_margin_color none

#: Color for the tab bar margin area. Defaults to using the terminal
#: background color.

#: }}}

#: Color scheme {{{

 foreground #dddddd
 background #000000

#: The foreground and background colors.

background_opacity 0.90

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. Be aware that using a value less than 1.0 is a (possibly
#: significant) performance hit. If you want to dynamically change
#: transparency of windows, set dynamic_background_opacity to yes
#: (this is off by default as it has a performance cost). Changing
#: this option when reloading the config will only work if
#: dynamic_background_opacity was enabled in the original config.

 background_image none

#: Path to a background image. Must be in PNG format.

 background_image_layout tiled

#: Whether to tile, scale or clamp the background image. The value can
#: be one of tiled, mirror-tiled, scaled, clamped.

 background_image_linear no

#: When background image is scaled, whether linear interpolation
#: should be used.

 dynamic_background_opacity no

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this option by reloading the config is not supported.

 background_tint 0.0

#: How much to tint the background image by the background color. The
#: tint is applied only under the text area, not margin/borders. This
#: option makes it easier to read the text. Tinting is done using the
#: current background color for each window. This option applies only
#: if background_opacity is set and transparent windows are supported
#: or background_image is set.

 dim_opacity 0.75

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# selection_foreground 000000
# selection_background fffacd

#: The foreground and background colors for text selected with the
#: mouse. Setting both of these to none will cause a "reverse video"
#: effect for selections, where the selection will be the cell text
#: color and the text will become the cell background color. Setting
#: only selection_foreground to none will cause the foreground color
#: to be used unchanged. Note that these colors can be overridden by
#: the program running in the terminal.

#: The color table {{{

#: The 256 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version, for the first 16 colors. You can set the
#: remaining 240 colors as color16 to color255.

# color0 000000
# color8 767676

#: black

# color1 cc0403
# color9 f2201f

#: red

# color2  19cb00
# color10 23fd00

#: green

# color3  cecb00
# color11 fffd00

#: yellow

# color4  0d73cc
# color12 1a8fff

#: blue

# color5  cb1ed1
# color13 fd28ff

#: magenta

# color6  0dcdcd
# color14 14ffff

#: cyan

# color7  dddddd
# color15 ffffff

#: white

 shell .

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login and --interactive to ensure that the shell starts in
#: interactive mode and reads its startup rc files.

 editor .

#: The terminal based text editor (such as vim or nano) to use when
#: editing the kitty config file or similar tasks.

#: The default value of . means to use the environment variables
#: VISUAL and EDITOR in that order. If these variables aren't set,
#: kitty will run your shell ($SHELL -l -i -c env) to see if your
#: shell startup rc files set VISUAL or EDITOR. If that doesn't work,
#: kitty will cycle through various known editors (vim, emacs, etc.)
#: and take the first one that exists on your system.

 close_on_child_death no

#: Close the window when the child process (shell) exits. With the
#: default value no, the terminal will remain open when the child
#: exits as long as there are still processes outputting to the
#: terminal (for example disowned or backgrounded processes). When
#: enabled with yes, the window will close as soon as the child
#: process exits. Note that setting it to yes means that any
#: background processes still using the terminal can fail silently
#: because their stdout/stderr/stdin no longer work.

allow_remote_control yes

#: Allow other programs to control kitty. If you turn this on, other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over SSH
#: connections. You can choose to either allow any program running
#: within kitty to control it with yes, or only allow programs that
#: connect to the socket (specified with the listen_on config option
#: or kitty --listen-on command line option) with the value socket-
#: only. The latter is useful if you want to prevent programs running
#: on a remote computer over SSH from controlling kitty. Reloading the
#: config will not affect this option.

listen_on unix:/tmp/kitty

#: Listen to the specified UNIX socket for remote control connections.
#: Note that this will apply to all kitty instances. It can be
#: overridden by the kitty --listen-on command line option, which
#: supports listening on TCP socket. This option accepts only UNIX
#: sockets, such as unix#:${TEMP}/mykitty or unix#:@mykitty (on Linux).
#: Environment variables are expanded and relative paths are resolved
#: with respect to the temporary directory. If {kitty_pid} is present,
#: then it is replaced by the PID of the kitty process, otherwise the
#: PID of the kitty process is appended to the value, with a hyphen.
#: This option is ignored unless you also set allow_remote_control to
#: enable remote control. See the help for kitty --listen-on for more
#: details. Changing this option by reloading the config is not
#: supported.

 env

#: Specify the environment variables to be set in all child processes.
#: Using the name with an equal sign (e.g. env VAR=) will set it to
#: the empty string. Specifying only the name (e.g. env VAR) will
#: remove the variable from the child process' environment. Note that
#: environment variables are expanded recursively, for example#:#:

#:     env VAR1=a
#:     env VAR2=${HOME}/${VAR1}/b

#: The value of VAR2 will be <path to home directory>/a/b.

 watcher

#: Path to python file which will be loaded for watchers
#: <https#://sw.kovidgoyal.net/kitty/launch/watchers>. Can be
#: specified more than once to load multiple watchers. The watchers
#: will be added to every kitty window. Relative paths are resolved
#: relative to the kitty config directory. Note that reloading the
#: config will only affect windows created after the reload.

 exe_search_path

#: Control where kitty finds the programs to run. The default search
#: order is#: First search the system wide PATH, then ~/.local/bin and
#: ~/bin. If still not found, the PATH defined in the login shell
#: after sourcing all its startup files is tried. Finally, if present,
#: the PATH specified by the env option is tried.

#: This option allows you to prepend, append, or remove paths from
#: this search order. It can be specified multiple times for multiple
#: paths. A simple path will be prepended to the search order. A path
#: that starts with the + sign will be append to the search order,
#: after ~/bin above. A path that starts with the - sign will be
#: removed from the entire search order. For example#:#:

#:     exe_search_path /some/prepended/path
#:     exe_search_path +/some/appended/path
#:     exe_search_path -/some/excluded/path

 update_check_interval 24

#: The interval to periodically check if an update to kitty is
#: available (in hours). If an update is found, a system notification
#: is displayed informing you of the available update. The default is
#: to check every 24 hours, set to zero to disable. Update checking is
#: only done by the official binary builds. Distro packages or source
#: builds do not do update checking. Changing this option by reloading
#: the config is not supported.

 startup_session none

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See sessions
#: <https#://sw.kovidgoyal.net/kitty/overview/startup-sessions> in the
#: kitty documentation for details. Note that relative paths are
#: interpreted with respect to the kitty config directory. Environment
#: variables in the path are expanded. Changing this option by
#: reloading the config is not supported.

 clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: possible actions are#: write-clipboard, read-clipboard, write-
#: primary, read-primary, read-clipboard-ask, read-primary-ask. The
#: default is to allow writing to the clipboard and primary selection
#: and to ask for permission when a program tries to read from the
#: clipboard. Note that disabling the read confirmation is a security
#: risk as it means that any program, even the ones running on a
#: remote server via SSH can read your clipboard. See also
#: clipboard_max_size.

 clipboard_max_size 64

#: The maximum size (in MB) of data from programs running in kitty
#: that will be stored for writing to the system clipboard. A value of
#: zero means no size limit is applied. See also clipboard_control.

 file_transfer_confirmation_bypass

#: The password that can be supplied to the file transfer kitten
#: <https#://sw.kovidgoyal.net/kitty/kittens/transfer/> to skip the
#: transfer confirmation prompt. This should only be used when
#: initiating transfers from trusted computers, over trusted networks
#: or encrypted transports, as it allows any programs running on the
#: remote machine to read/write to the local filesystem, without
#: permission.

 allow_hyperlinks yes

#: Process hyperlink escape sequences (OSC 8). If disabled OSC 8
#: escape sequences are ignored. Otherwise they become clickable
#: links, that you can click with the mouse or by using the hints
#: kitten <https#://sw.kovidgoyal.net/kitty/kittens/hints/>. The
#: special value of ask means that kitty will ask before opening the
#: link when clicked.

shell_integration enabled

#: Enable shell integration on supported shells. This enables features
#: such as jumping to previous prompts, browsing the output of the
#: previous command in a pager, etc. on supported shells. Set to
#: disabled to turn off shell integration, completely. It is also
#: possible to disable individual features, set to a space separated
#: list of these values#: no-rc, no-cursor, no-title, no-cwd, no-
#: prompt-mark, no-complete. See Shell integration
#: <https#://sw.kovidgoyal.net/kitty/shell-integration/> for details.

 allow_cloning ask

#: Control whether programs running in the terminal can request new
#: windows to be created. The canonical example is clone-in-kitty
#: <https#://sw.kovidgoyal.net/kitty/shell-integration/clone-shell>.
#: By default, kitty will ask for permission for each clone request.
#: Allowing cloning unconditionally gives programs running in the
#: terminal (including over SSH) permission to execute arbitrary code,
#: as the user who is running the terminal, on the computer that the
#: terminal is running on.

 clone_source_strategies venv,conda,env_var,path

#: Control what shell code is sourced when running clone-in-kitty in
#: the newly cloned window. The supported strategies are#:

#: venv
#:     Source the file $VIRTUAL_ENV/bin/activate. This is used by the
#:     Python stdlib venv module and allows cloning venvs automatically.
#: conda
#:     Run conda activate $CONDA_DEFAULT_ENV. This supports the virtual
#:     environments created by conda.
#: env_var
#:     Execute the contents of the environment variable
#:     KITTY_CLONE_SOURCE_CODE with eval.
#: path
#:     Source the file pointed to by the environment variable
#:     KITTY_CLONE_SOURCE_PATH.

#: This option must be a comma separated list of the above values.
#: This only source the first valid one in the above order.

 term xterm-kitty

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on "Stack Overflow"
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work. Changing this option by reloading the config will only affect
#: newly created windows.

#: }}}

#: OS specific tweaks {{{

 wayland_titlebar_color system

#: The color of the kitty window's titlebar on Wayland systems with
#: client side window decorations such as GNOME. A value of system
#: means to use the default system color, a value of background means
#: to use the background color of the currently active window and
#: finally you can use an arbitrary color, such as 12af59 or red.

 macos_titlebar_color 56526e

#: The color of the kitty indow's titlebar on macOS. A value of
#: system means to use the default system color, light or dark can
#: also be used to set it explicitly. A value of background means to
#: use the background color of the currently active window and finally
#: you can use an arbitrary color, such as 12af59 or red. WARNING#:
#: This option works by using a hack when arbitrary color (or
#: background) is configured, as there is no proper Cocoa API for it.
#: It sets the background color of the entire window and makes the
#: titlebar transparent. As such it is incompatible with
#: background_opacity. If you want to use both, you are probably
#: better off just hiding the titlebar with hide_window_decorations.
hide_window_decorations titlebar-only
macos_option_as_alt yes

#: Use the Option key as an Alt key on macOS. With this set to no,
#: kitty will use the macOS native Option+Key to enter Unicode
#: character behavior. This will break any Alt+Key keyboard shortcuts
#: in your terminal programs, but you can use the macOS Unicode input
#: technique. You can use the values#: left, right or both to use only
#: the left, right or both Option keys as Alt, instead. Note that
#: kitty itself always treats Option the same as Alt. This means you
#: cannot use this option to configure different kitty shortcuts for
#: Option+Key vs. Alt+Key. Also, any kitty shortcuts using
#: Option/Alt+Key will take priority, so that any such key presses
#: will not be passed to terminal programs running inside kitty.
#: Changing this option by reloading the config is not supported.

 macos_hide_from_tasks no

##: Hide the kitty window from running tasks on macOS (âŒ˜+Tab and the
#: Dock). Changing this option by reloading the config is not
#: supported.

macos_quit_when_last_window_closed yes

#: Have kitty quit when all the top-level windows are closed on macOS.
#: By default, kitty will stay running, even with no open windows, as
#: is the expected behavior on macOS.

 macos_window_resizable yes

#: Disable this if you want kitty top-level OS windows to not be
#: resizable on macOS. Changing this option by reloading the config
#: will only affect newly created OS windows.

 macos_thicken_font 0

#: Draw an extra border around the font with the given width, to
#: increase legibility at small font sizes on macOS. For example, a
#: value of 0.75 will result in rendering that looks similar to sub-
#: pixel antialiasing at common font sizes.

 macos_traditional_fullscreen no

#: Use the macOS traditional full-screen transition, that is faster,
#: but less pretty.

 macos_show_window_title_in all

#: Control where the window title is displayed on macOS. A value of
#: window will show the title of the currently active window at the
#: top of the macOS window. A value of menubar will show the title of
#: the currently active window in the macOS global menu bar, making
#: use of otherwise wasted space. A value of all will show the title
#: in both places, and none hides the title. See
#: macos_menubar_title_max_length for how to control the length of the
#: title in the menu bar.

 macos_menubar_title_max_length 0

#: The maximum number of characters from the window title to show in
#: the macOS global menu bar. Values less than one means that there is
#: no maximum limit.

 macos_custom_beam_cursor no

#: Use a custom mouse cursor for macOS that is easier to see on both
#: light and dark backgrounds. Nowadays, the default macOS cursor
#: already comes with a white border. WARNING#: this might make your
#: mouse cursor invisible on dual GPU machines. Changing this option
#: by reloading the config is not supported.


 kitty_mod ctrl+shift

 map cmd+c       copy_to_clipboard

#: Paste from clipboard

 map cmd+v       paste_from_clipboard

map kitty_mod+g show_last_command_output

#: New window

map kitty_mod+enter launch --location=hsplit

#: New OS window

 map kitty_mod+n new_os_window
 map cmd+n       new_os_window

#: Close window

 map kitty_mod+w close_window
 map shift+cmd+d close_window

#: Next tab

map kitty_mod+l next_tab

#: Previous tab

map kitty_mod+h previous_tab

#: New tab

map kitty_mod+t new_tab
map cmd+t       new_tab

#: Close tab

map kitty_mod+q close_tab
map cmd+w       close_tab

#: Close OS window

map shift+cmd+w close_os_window

#: Increase font size

 map kitty_mod+equal  change_font_size all +2.0
 map kitty_mod+plus   change_font_size all +2.0
 map kitty_mod+kp_add change_font_size all +2.0
 map cmd+plus         change_font_size all +2.0
 map cmd+equal        change_font_size all +2.0
 map shift+cmd+equal  change_font_size all +2.0

#: Decrease font size

 map kitty_mod+minus       change_font_size all -2.0
 map kitty_mod+kp_subtract change_font_size all -2.0
 map cmd+minus             change_font_size all -2.0
 map shift+cmd+minus       change_font_size all -2.0

include nano.conf

action_alias kitty_scrollback_nvim kitten /Users/sam/.local/share/nvim/lazy/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py

map kitty_mod+e kitty_scrollback_nvim
map kitty_mod+g kitty_scrollback_nvim --config ksb_builtin_last_cmd_output
mouse_map ctrl+shift+right press ungrabbed combine #: mouse_select_command_output #: kitty_scrollback_nvim --config ksb_builtin_last_visited_cmd_output

map ctrl+j neighboring_window down
map ctrl+k neighboring_window up
map ctrl+h neighboring_window left
map ctrl+l neighboring_window right

# Unset the mapping to pass the keys to neovim
map --when-focus-on var:IS_NVIM ctrl+j
map --when-focus-on var:IS_NVIM ctrl+k
map --when-focus-on var:IS_NVIM ctrl+h
map --when-focus-on var:IS_NVIM ctrl+l

# the 3 here is the resize amount, adjust as needed
map alt+j kitten relative_resize.py down  3
map alt+k kitten relative_resize.py up    3
map alt+h kitten relative_resize.py left  3
map alt+l kitten relative_resize.py right 3

map --when-focus-on var:IS_NVIM alt+j
map --when-focus-on var:IS_NVIM alt+k
map --when-focus-on var:IS_NVIM alt+h
map --when-focus-on var:IS_NVIM alt+l
